#include <stdio.h>: Includes the Standard Input Output library for functions like printf.
#include <fcntl.h>: Includes the file control options for functions like open.
#include <unistd.h>: Includes the POSIX API for functions like close and perror.
int fd: Declares a file descriptor.
open("example.txt", O_CREAT | O_WRONLY, 0644): Attempts to open the file example.txt with the following flags:
O_CREAT: Create the file if it doesn't exist.
O_WRONLY: Open the file in write-only mode.
0644: Sets the file permissions (owner can read and write; group and others can read).
Checks if open returned -1, indicating an error.
perror("Error creating file"): Prints a descriptive error message.
return 1: Exits the program with a non-zero status to indicate failure.


25. #include <stdio.h>: Includes the Standard Input Output library for functions like printf and scanf.
#include <unistd.h>: Includes the POSIX API for functions like unlink
char filename[100];: Declares a character array to hold the filename.
printf("Enter the filename to delete: ");: Prompts the user to enter a filename.
scanf("%s", filename);: Reads the filename input by the user and stores it in the filename array.
if (unlink(filename) == -1): Attempts to delete the file using the unlink function.
unlink returns 0 on success and -1 on error.
perror("Error deleting file");: Prints a descriptive error message if unlink fails.
return 1;: Exits the program with a non-zero status to indicate failure.

29. char oldname[100], newname[100];: Declares two character arrays to hold the current filename (oldname) and the new filename (newname).
printf("Enter the current filename: ");: Prompts the user to enter the current filename.
scanf("%s", oldname);: Reads the current filename input by the user and stores it in the oldname array.
printf("Enter the new filename: ");: Prompts the user to enter the new filename.
scanf("%s", newname);: Reads the new filename input by the user and stores it in the newname array.
if (rename(oldname, newname) == -1): Attempts to rename the file using the rename function.
rename returns 0 on success and -1 on error.
perror("Error renaming file");: Prints a descriptive error message if rename fails.
return 1;: Exits the program with a non-zero status to indicate failure.

